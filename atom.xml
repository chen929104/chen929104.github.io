<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chen</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-07T05:24:22.985Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/07/hello-world/"/>
    <id>http://example.com/2020/12/07/hello-world/</id>
    <published>2020-12-07T05:24:22.985Z</published>
    <updated>2020-12-07T05:24:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>useEffect详解</title>
    <link href="http://example.com/2020/11/23/react%20useEffect%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2020/11/23/react%20useEffect%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-11-23T22:07:09.000Z</published>
    <updated>2020-12-07T05:24:22.985Z</updated>
    
    <content type="html"><![CDATA[<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>react 在 16.8 版本中引入了新特新 Hooks,在使用 Hooks 的过程中会有一些有趣的事情,有时候你也可以去自定义 Hooks 来抽出一些重复的逻辑。在学习使用 Hooks 的时候难免会遇到一些问题。故写这篇文章来加深对 useEffect 的理解。<br>useEffect 是一个重要的 Hooks,在使用的过程中很像类组件中的 componentDidMount,componentWillUnmount 的结合。</p><h5 id="类组-Class-Components-件和函数组件-Function-Components"><a href="#类组-Class-Components-件和函数组件-Function-Components" class="headerlink" title="类组(Class Components)件和函数组件(Function Components)"></a>类组(Class Components)件和函数组件(Function Components)</h5><p>在以前使用类组件的时候习惯了 react 的生命周期组件的 mount，updata,unmount 我们可以以此来定义一个类组件，并在组件加载完成后又一个定时器在组件销毁是销毁定时器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">   constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">     this.timerID &#x3D; setInterval(</span><br><span class="line">      () &#x3D;&gt; &#123;&#125;,</span><br><span class="line">      1000</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(this.timerID);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数组件在使用过程中却并没有生命周期,故而引用了 Hooks 来替代生命周期,一个简单的函数组件并实现上述功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Demo&#123;</span><br><span class="line">  useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">   const timerID &#x3D; setInterval(</span><br><span class="line">      () &#x3D;&gt; &#123;&#125;,</span><br><span class="line">      1000</span><br><span class="line">    );</span><br><span class="line">    return  clearInterval(timerID);</span><br><span class="line">  &#125;)</span><br><span class="line">  return ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回归主题，来讲一下 useEffect</p><hr><h5 id="react-的渲染"><a href="#react-的渲染" class="headerlink" title="react 的渲染"></a>react 的渲染</h5><p>在使用过程中，遇到过修改了 stast 或者 props 时 useEffect 没有获取到最新的状态出现了许多的问题，发现 react 渲染时会直接重新执行 render</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Demo &#x3D; （）&#x3D;&gt;&#123;</span><br><span class="line">  const [count,setCount] &#x3D; useState(0);</span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;Button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125; &gt;onClick&lt;&#x2F;Button&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在 react 的执行中并没有进行双向绑定，没有监视其改变，count 仅仅像一个普通的数字在刷新的时候进行替换使用新的数字进行组件的重新渲染，然后重新更新 dom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始</span><br><span class="line">const Demo &#x3D; （）&#x3D;&gt;&#123;</span><br><span class="line">  const count  &#x3D; 0</span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;Button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125; &gt;onClick&lt;&#x2F;Button&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 点击一次</span><br><span class="line">const Demo &#x3D; （）&#x3D;&gt;&#123;</span><br><span class="line">  const count  &#x3D; 1</span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;Button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125; &gt;onClick&lt;&#x2F;Button&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 点击两次</span><br><span class="line">const Demo &#x3D; （）&#x3D;&gt;&#123;</span><br><span class="line">  const count  &#x3D; 2</span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;Button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125; &gt;onClick&lt;&#x2F;Button&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以每一次状态更新的时候 state 和 props 是会重新生产一个新的状态执行 render，上一个 count 和当前的 count 没有关系是独立与其他渲染的</p><p>这个处理方式在 function 中也有着体现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const Demo &#x3D; （）&#x3D;&gt;&#123;</span><br><span class="line">  const [count,setCount] &#x3D; useState(0);</span><br><span class="line">  const alertCount  &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">    setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">      alert(count);</span><br><span class="line">    &#125;,3000)</span><br><span class="line">  &#125;</span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;count&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;()&#x3D;&gt;&#123;setCount(count+1)&#125;&#125; &gt;onClick&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button onClick&#x3D;&#123;alertCount&#125; &gt;alertCount&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击了 alertCount 并快速且多次的点击 onClick，react alert 出的 count 会是 0，因为 react 的渲染问题每次的 count 都是一个新的状态在每一次 render 是一个常数并赋值给了 function 相当于在点击的时候点击了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function alertFunction &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">    alert(0)</span><br><span class="line">  &#125;,3000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想要获取到最新的 state 时，你可以使用 useRef 去保存数据</p><h5 id="每次渲染也有自己的-effect"><a href="#每次渲染也有自己的-effect" class="headerlink" title="每次渲染也有自己的 effect"></a>每次渲染也有自己的 effect</h5><p>正如我们所说每次渲染时都会有一个独立的 state 那么对于 effect 呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Counter() &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如上面那个例子，每一次许渲染的时候都会生产一个 effect 获取到一个常数 count 像下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const count &#x3D; 0</span><br><span class="line"></span><br><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">  document.title &#x3D; &#96;You clicked 0 times&#96;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;p&gt;react 在 16.8 版本中引入了新特新 Hooks,在使用 Hooks 的过程中会有一些有趣的事情,有时候你也可以去自定义 Hooks</summary>
      
    
    
    
    
  </entry>
  
</feed>
